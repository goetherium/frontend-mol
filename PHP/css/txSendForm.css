/* Стили для отображения модального окна и его элементов.
   Стиль для центрирования анимированной gif ожидания транзакции.
*/


/**************************************************************************
 * Стили для отображения модального окна и его элементов.
 * Используется в скрипте txSendForm.php.
 *
 * Инфа по модальным окнам:
 * https://moonback.ru/page/modal-window-html-css-only 
 * https://ruseller.com/lessons.php?id=1556&rub=2 
 * https://xhtml.ru/2020/javascript/modal-dialog-window/

  Пример HTML
  <div id="modalWindow" class="bc-txsend__modal--bg">
    <!-- Модальное окно, его классы задают вид некоторых элементов -->
    <div class="bc-txsend__modal--win">
      <!-- 
        Кнопка "Закрыть" справа свехру модального окна.
        Чтобы не перегружать страницу, перейти к фиктивному блоку noWindow или погасить переход в JS
      <a id="txTopButton" href="#noWindow" title="Закрыть" class="bc-txsend__modal--topbutton">X</a> -->
      <div id="txSendResult">Здесь будет результат транзакции</div>
      <div>
      <input id="modalBottomButton" type="button" value="Закрыть" class="bc-txsend__modal--bottombutton">
      </div>
    </div>
  </div>
*/


/* Первый элемент модального окна — фон, занимает всю видимую часть браузера.
 * Если представить страницу как слоёный пирог, то фон модального окна 
 * находится выше всех. Поэтому когда пользователь тыкает по экрану мышкой, 
 * то по сути он елозит по фону модального окна.
 * В обычном режиме модальное окно не отображается, так как прозрачно
 * (за это отвечает display:none или opacity:0) и не мешает просмотру страницы.
 * Если же обратиться к блоку модального окна по его ID (через хеш-тег),
 * то сработает стиль псевдо-класса :target, 
 * который сделает модальное окно видимым и произойдет перехват мыши
 * через активацию значения атрибута pointer-events:auto.
 */
.bc-txsend__modal--bg {
  /* Значени fixed используется для создания «плавающего» элемента, 
   * который остается в том же положении по центру страницы,
   * независимо от прокрутки основной страницы
   */
	position: fixed;
  /* Растягиваем фон по всему экрану: top, right, bottom и left
   * задают смещения от краёв содержащего блок элемента.
   * Для центрирования содержимого модального окна по горизонтали и вертикали 
   * можно использовать display: flex; justify-content: center; align-items: center; 
   */
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
  /* Полупрозрачный цвет фона: первые три цифры - red, green, blue,
   * последняя задает прозрачность элемента от 0 до 1.
   * rgba(0, 120, 201, 0.2) - голубоватый фон */
	background: rgba(0,0,0,0.5);
  /* z-index определяет положение элемента и нижестоящих элементов по оси z. 
   * В случае перекрытия элементов, это значение определяет порядок наложения. 
   * Элементы с большим z-index перекрывают элементы с меньшим */
	z-index: 999;
  /* transition - эффект перехода между двумя состояниями элемента:
   * opacity - анимируем только свойство opacity (непрозрачность).
   * 400ms - анимация продлится указанное время
   * ease-in - делаем начало анимации более плавным
   */
	transition: opacity 400ms ease-in;
  /* -webkit для Safari и Chrome, -moz для FireFox */
  -webkit-transition: opacity 400ms ease-in;
  -moz-transition: opacity 400ms ease-in;
  /* Временно удаляем элемент из документа (либо opacity: 0;) */
	display: none;
  /* Предотвращает события мыши и щелчки по элементу */
  pointer-events: none;
  /* Прокрутка, когда элемент не помещается на страницу */
  overflow: auto;
	/*font-family: Arial, Helvetica, sans-serif;*/
}

/* Для отображения модального окна, нужно изменить свойство видимости фона.
 * Класс используется, когда пользователь переходит к окну, например по ссылке.
 * Для перехода к элементу в ссылке пишется символ # и указывается id элемента.
 * К примеру, по ссылке site.ru/index.html#target-pseudo 
 * происходит переход к элементу, атрибут id которого задан как target-pseudo. 
 * Такая запись адреса называется «целевой элемент». 
 * Псевдокласс :target применяется к целевому элементу.
 * Это можно сделать через JavaScript - установить свойство display или opacity.
 * Тогда JavaScript должен разрешить и обработку мыши.
 */
.bc-txsend__modal--bg:target {
	/* Делаем фон видимым */
  display: block; /* либо opacity: 1; */
  /* Элемент ведёт себя так же, как и если бы свойство pointer-events 
   * не было задано, т.е. видим для событий мыши
   */
  pointer-events: auto;
}

/* Само диалоговое окно.
 * Ширина диалогового окна и его отступы от экрана.
 * Вместо width и height используются max-width и max-height,
 * чтобы модальное окно работало и на небольших экранах.
 * Если вместо этого использовать width: 500px; то на мобильных 
 * устройствах будет горизонтальная полоса прокрутки.
 */
.bc-txsend__modal--win {
	max-width: 200px;
  width: 100%; /* Растягиваем на максимальную ширину, указанную в max-width */
  /* Если в окне много данных, они не влезут в окно, 
     в таком случае высоту не нужно ограничивать */
  /*height: 100%; max-height: 200px;*/
	position: relative;
	margin: 10% auto;
	padding: 5px 20px 13px 20px;
	border-radius: 10px;
	background: #fff;
	background: -moz-linear-gradient(#fff, #999);
	background: -webkit-linear-gradient(#fff, #999);
	background: -o-linear-gradient(#fff, #999);
}

 /* Кнопка не используется.
  * Вид кнопки ЗАКРЫТЬ справа верху модального окна.
  * Устанавливаем фон и положение текста. 
  * Затем позиционируем кнопку, делаем ее круглой.
  * Почему-то ссылка с кнопкой подчеркивается, но только на этом сайте...
  */
.bc-txsend__modal--topbutton {
  /* Отменяет все эффекты, в том числе и подчеркивание у ссылок */
	text-decoration: none;
	/*background: #606061;*/ /* фон кнопки */
	color: #FFFFFF;
	line-height: 25px;
	position: absolute;
	right: -12px;
	text-align: center;
	top: -10px;
	width: 24px;
	font-weight: bold;
	-webkit-border-radius: 12px;
	-moz-border-radius: 12px;
	border-radius: 12px; /* делаем кнопку круглой */
	-moz-box-shadow: 1px 1px 3px #000;
	-webkit-box-shadow: 1px 1px 3px #000;
	box-shadow: 1px 1px 3px #000;  /* легкая тень */
}

/* Изменение фона кнопки ЗАКРЫТЬ принаведении мыши */
.bc-txsend__modal--topbutton:hover {
  background: #00d9ff;
}

/* Вид кнопки ЗАКРЫТЬ внизу модального окна */
.bc-txsend__modal--bottombutton {
  display: block;
  width: 50%;
  background: #369;
  color: #fff;
  padding: 2%;
  margin: 0 auto;
  border-radius: 3px;
  text-align: center;
  text-decoration: none;
}

/* Вид кнопки ЗАКРЫТЬ внизу модального окна при наведении на неё мыши */
.bc-txsend__modal--bottombutton:hover {
  background: #47a;
}



/**************************************************************************
/* Стиль для центрирования анимированной gif ожидания транзакции */
.bc-txsend__animated-gif{
  display:none;  /* по умолчанию gif скрыта */
  position:fixed;  /* положение не меняется при прокрутке страницы */
  left:40%;  /* центрируем положение */
  top:40%;
}

/* 
 Вариант центрирования анимированной gif при помощи FlexBox, не используется
 
 https://developer.mozilla.org/ru/docs/Learn/CSS/CSS_layout/Flexbox
 https://habr.com/ru/post/467049/
 https://tproger.ru/translations/how-css-flexbox-works/
 
 CSS Flexbox — это технология для создания сложных гибких макетов
 за счёт правильного размещения элементов (flex items),
 чтобы наилучшим образом заполнить доступное пространство 
 (главным образом, для отображения на всех типах устройств с любым размером экрана).
 Flex контейнер расширяет элементы, чтобы заполнить доступное свободное пространство,
 или сжимает их, чтобы предотвратить переполнение.
 Flexbox определяет набор CSS свойств для контейнера (flex-контейнер) 
 и его дочерних элементов (flex-блоков).
 Flexbox имеет главную ось (по умолчанию горизонтальную) и поперечную.
 Первое, что нужно сделать – это указать контейнеру display:flex
 Это сделает одинаковым размеры (высоту и ширину) дочерних элементов Flexbox.
*/
.not-used {
  display: flex; /* сделает одинаковым размеры (высоту и ширину) дочерних элементов */
  position: fixed; /* элементы будут в центре экрана вне зависимости от прокрутки */
  justify-content: center; /* выравнивание элементов Flexbox по главной оси */
  align-items: center; /* выравнивание элементов Flexbox по поперечной оси */
  /* начало контейнера в левом верхнем углу */
  top: 0px;
  left: 0px;
  /* 1vw — единица равная 1/100'ой ширины вьюпорта браузера 
     Эти два параметра центрируют элемент
  */
  width: 100vw;  /* ширина 100% по горизонтали */
  height: 100vh; /* ширина 100% по вертикали */
}
