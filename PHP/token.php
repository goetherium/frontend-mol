<?php
/* 
Внимание! Модуль в разработке!

Данный модуль реализует функции работы с токеном 
для защиты от межсайтовых подделок (XSRF или CSRF).

Для защиты от XSRF решено использовать куки с атрибутом SameSite=Strict,
т.е. такая кука передаётся браузером серверу, только со страниц, полученных
от этого сервера.

*/

/* Модуль использует константы, заданные в модуле settings.php, который
 * должен быть загружен к моменту вызова функций данного модуля.
 * Модуль генерирует токен размером 32 байта, сохраняет его в сессии и
 * передает браузеру на защищаемых страницах, обычно с html-формами,
 * в виде куки с атрибутами SameSite=Strict и HttpOnly.
 * После получения запроса от браузера, который пошлёт серверу данную куку,
 * только, если страница создана данным сервером, делается сверка значения куки
 * с сессионной переменной, которая имеет таймаут такой же, что и кука.
 * По окончании таймаута токен генерируется заново.

  функция fetch в браузере имеет параметре, обратить на них внимание
  mode: "cors", // same-origin, no-cors
  credentials: "same-origin", // omit, include

 */

function XSRFGenerateToken() {
}

function XSRFCheckToken() {
}

function XSRFSetToken() {
  // Проверим, есть ли токен в сессии и не истёк ли его таймаут.
  // Поскольку атрибут SameSite можно установить через setcookie только с РНР 7.3,
  // установим его через заголовок напрямую.
  // Делаем недуступным для JavaScript
  if ($arrSettings['use_xsrf_token']) {
    header('Set-Cookie: '.$arrSettings['xsrf_token_cookie_name'].'=adf12345; '.
          'SameSite='.$arrSettings['xsrf_token_samesite_value'].'; '.
          'Max-Age='.$arrSettings['xsrf_token_timeout'].'; HttpOnly');
  }
  else {
    // Если использование XSRF-токена выключено, удалим куки, которая м.б. установлена ранее
    header('Set-Cookie: '.$arrSettings['xsrf_token_cookie_name'].'=; '.
          'SameSite='.$arrSettings['xsrf_token_samesite_value'].'; '.
          'Max-Age=-1; HttpOnly');
  }
}

?>